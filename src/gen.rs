use arrow2::{buffer::Buffer, bitmap::{Bitmap, MutableBitmap}};


pub const MASK_ARRAY_0: [[i32; 8]; 256] = [
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0],
    [2, 0, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0],
    [1, 2, 0, 0, 0, 0, 0, 0],
    [0, 1, 2, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0],
    [0, 3, 0, 0, 0, 0, 0, 0],
    [1, 3, 0, 0, 0, 0, 0, 0],
    [0, 1, 3, 0, 0, 0, 0, 0],
    [2, 3, 0, 0, 0, 0, 0, 0],
    [0, 2, 3, 0, 0, 0, 0, 0],
    [1, 2, 3, 0, 0, 0, 0, 0],
    [0, 1, 2, 3, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 0, 0],
    [0, 4, 0, 0, 0, 0, 0, 0],
    [1, 4, 0, 0, 0, 0, 0, 0],
    [0, 1, 4, 0, 0, 0, 0, 0],
    [2, 4, 0, 0, 0, 0, 0, 0],
    [0, 2, 4, 0, 0, 0, 0, 0],
    [1, 2, 4, 0, 0, 0, 0, 0],
    [0, 1, 2, 4, 0, 0, 0, 0],
    [3, 4, 0, 0, 0, 0, 0, 0],
    [0, 3, 4, 0, 0, 0, 0, 0],
    [1, 3, 4, 0, 0, 0, 0, 0],
    [0, 1, 3, 4, 0, 0, 0, 0],
    [2, 3, 4, 0, 0, 0, 0, 0],
    [0, 2, 3, 4, 0, 0, 0, 0],
    [1, 2, 3, 4, 0, 0, 0, 0],
    [0, 1, 2, 3, 4, 0, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0],
    [0, 5, 0, 0, 0, 0, 0, 0],
    [1, 5, 0, 0, 0, 0, 0, 0],
    [0, 1, 5, 0, 0, 0, 0, 0],
    [2, 5, 0, 0, 0, 0, 0, 0],
    [0, 2, 5, 0, 0, 0, 0, 0],
    [1, 2, 5, 0, 0, 0, 0, 0],
    [0, 1, 2, 5, 0, 0, 0, 0],
    [3, 5, 0, 0, 0, 0, 0, 0],
    [0, 3, 5, 0, 0, 0, 0, 0],
    [1, 3, 5, 0, 0, 0, 0, 0],
    [0, 1, 3, 5, 0, 0, 0, 0],
    [2, 3, 5, 0, 0, 0, 0, 0],
    [0, 2, 3, 5, 0, 0, 0, 0],
    [1, 2, 3, 5, 0, 0, 0, 0],
    [0, 1, 2, 3, 5, 0, 0, 0],
    [4, 5, 0, 0, 0, 0, 0, 0],
    [0, 4, 5, 0, 0, 0, 0, 0],
    [1, 4, 5, 0, 0, 0, 0, 0],
    [0, 1, 4, 5, 0, 0, 0, 0],
    [2, 4, 5, 0, 0, 0, 0, 0],
    [0, 2, 4, 5, 0, 0, 0, 0],
    [1, 2, 4, 5, 0, 0, 0, 0],
    [0, 1, 2, 4, 5, 0, 0, 0],
    [3, 4, 5, 0, 0, 0, 0, 0],
    [0, 3, 4, 5, 0, 0, 0, 0],
    [1, 3, 4, 5, 0, 0, 0, 0],
    [0, 1, 3, 4, 5, 0, 0, 0],
    [2, 3, 4, 5, 0, 0, 0, 0],
    [0, 2, 3, 4, 5, 0, 0, 0],
    [1, 2, 3, 4, 5, 0, 0, 0],
    [0, 1, 2, 3, 4, 5, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0],
    [0, 6, 0, 0, 0, 0, 0, 0],
    [1, 6, 0, 0, 0, 0, 0, 0],
    [0, 1, 6, 0, 0, 0, 0, 0],
    [2, 6, 0, 0, 0, 0, 0, 0],
    [0, 2, 6, 0, 0, 0, 0, 0],
    [1, 2, 6, 0, 0, 0, 0, 0],
    [0, 1, 2, 6, 0, 0, 0, 0],
    [3, 6, 0, 0, 0, 0, 0, 0],
    [0, 3, 6, 0, 0, 0, 0, 0],
    [1, 3, 6, 0, 0, 0, 0, 0],
    [0, 1, 3, 6, 0, 0, 0, 0],
    [2, 3, 6, 0, 0, 0, 0, 0],
    [0, 2, 3, 6, 0, 0, 0, 0],
    [1, 2, 3, 6, 0, 0, 0, 0],
    [0, 1, 2, 3, 6, 0, 0, 0],
    [4, 6, 0, 0, 0, 0, 0, 0],
    [0, 4, 6, 0, 0, 0, 0, 0],
    [1, 4, 6, 0, 0, 0, 0, 0],
    [0, 1, 4, 6, 0, 0, 0, 0],
    [2, 4, 6, 0, 0, 0, 0, 0],
    [0, 2, 4, 6, 0, 0, 0, 0],
    [1, 2, 4, 6, 0, 0, 0, 0],
    [0, 1, 2, 4, 6, 0, 0, 0],
    [3, 4, 6, 0, 0, 0, 0, 0],
    [0, 3, 4, 6, 0, 0, 0, 0],
    [1, 3, 4, 6, 0, 0, 0, 0],
    [0, 1, 3, 4, 6, 0, 0, 0],
    [2, 3, 4, 6, 0, 0, 0, 0],
    [0, 2, 3, 4, 6, 0, 0, 0],
    [1, 2, 3, 4, 6, 0, 0, 0],
    [0, 1, 2, 3, 4, 6, 0, 0],
    [5, 6, 0, 0, 0, 0, 0, 0],
    [0, 5, 6, 0, 0, 0, 0, 0],
    [1, 5, 6, 0, 0, 0, 0, 0],
    [0, 1, 5, 6, 0, 0, 0, 0],
    [2, 5, 6, 0, 0, 0, 0, 0],
    [0, 2, 5, 6, 0, 0, 0, 0],
    [1, 2, 5, 6, 0, 0, 0, 0],
    [0, 1, 2, 5, 6, 0, 0, 0],
    [3, 5, 6, 0, 0, 0, 0, 0],
    [0, 3, 5, 6, 0, 0, 0, 0],
    [1, 3, 5, 6, 0, 0, 0, 0],
    [0, 1, 3, 5, 6, 0, 0, 0],
    [2, 3, 5, 6, 0, 0, 0, 0],
    [0, 2, 3, 5, 6, 0, 0, 0],
    [1, 2, 3, 5, 6, 0, 0, 0],
    [0, 1, 2, 3, 5, 6, 0, 0],
    [4, 5, 6, 0, 0, 0, 0, 0],
    [0, 4, 5, 6, 0, 0, 0, 0],
    [1, 4, 5, 6, 0, 0, 0, 0],
    [0, 1, 4, 5, 6, 0, 0, 0],
    [2, 4, 5, 6, 0, 0, 0, 0],
    [0, 2, 4, 5, 6, 0, 0, 0],
    [1, 2, 4, 5, 6, 0, 0, 0],
    [0, 1, 2, 4, 5, 6, 0, 0],
    [3, 4, 5, 6, 0, 0, 0, 0],
    [0, 3, 4, 5, 6, 0, 0, 0],
    [1, 3, 4, 5, 6, 0, 0, 0],
    [0, 1, 3, 4, 5, 6, 0, 0],
    [2, 3, 4, 5, 6, 0, 0, 0],
    [0, 2, 3, 4, 5, 6, 0, 0],
    [1, 2, 3, 4, 5, 6, 0, 0],
    [0, 1, 2, 3, 4, 5, 6, 0],
    [7, 0, 0, 0, 0, 0, 0, 0],
    [0, 7, 0, 0, 0, 0, 0, 0],
    [1, 7, 0, 0, 0, 0, 0, 0],
    [0, 1, 7, 0, 0, 0, 0, 0],
    [2, 7, 0, 0, 0, 0, 0, 0],
    [0, 2, 7, 0, 0, 0, 0, 0],
    [1, 2, 7, 0, 0, 0, 0, 0],
    [0, 1, 2, 7, 0, 0, 0, 0],
    [3, 7, 0, 0, 0, 0, 0, 0],
    [0, 3, 7, 0, 0, 0, 0, 0],
    [1, 3, 7, 0, 0, 0, 0, 0],
    [0, 1, 3, 7, 0, 0, 0, 0],
    [2, 3, 7, 0, 0, 0, 0, 0],
    [0, 2, 3, 7, 0, 0, 0, 0],
    [1, 2, 3, 7, 0, 0, 0, 0],
    [0, 1, 2, 3, 7, 0, 0, 0],
    [4, 7, 0, 0, 0, 0, 0, 0],
    [0, 4, 7, 0, 0, 0, 0, 0],
    [1, 4, 7, 0, 0, 0, 0, 0],
    [0, 1, 4, 7, 0, 0, 0, 0],
    [2, 4, 7, 0, 0, 0, 0, 0],
    [0, 2, 4, 7, 0, 0, 0, 0],
    [1, 2, 4, 7, 0, 0, 0, 0],
    [0, 1, 2, 4, 7, 0, 0, 0],
    [3, 4, 7, 0, 0, 0, 0, 0],
    [0, 3, 4, 7, 0, 0, 0, 0],
    [1, 3, 4, 7, 0, 0, 0, 0],
    [0, 1, 3, 4, 7, 0, 0, 0],
    [2, 3, 4, 7, 0, 0, 0, 0],
    [0, 2, 3, 4, 7, 0, 0, 0],
    [1, 2, 3, 4, 7, 0, 0, 0],
    [0, 1, 2, 3, 4, 7, 0, 0],
    [5, 7, 0, 0, 0, 0, 0, 0],
    [0, 5, 7, 0, 0, 0, 0, 0],
    [1, 5, 7, 0, 0, 0, 0, 0],
    [0, 1, 5, 7, 0, 0, 0, 0],
    [2, 5, 7, 0, 0, 0, 0, 0],
    [0, 2, 5, 7, 0, 0, 0, 0],
    [1, 2, 5, 7, 0, 0, 0, 0],
    [0, 1, 2, 5, 7, 0, 0, 0],
    [3, 5, 7, 0, 0, 0, 0, 0],
    [0, 3, 5, 7, 0, 0, 0, 0],
    [1, 3, 5, 7, 0, 0, 0, 0],
    [0, 1, 3, 5, 7, 0, 0, 0],
    [2, 3, 5, 7, 0, 0, 0, 0],
    [0, 2, 3, 5, 7, 0, 0, 0],
    [1, 2, 3, 5, 7, 0, 0, 0],
    [0, 1, 2, 3, 5, 7, 0, 0],
    [4, 5, 7, 0, 0, 0, 0, 0],
    [0, 4, 5, 7, 0, 0, 0, 0],
    [1, 4, 5, 7, 0, 0, 0, 0],
    [0, 1, 4, 5, 7, 0, 0, 0],
    [2, 4, 5, 7, 0, 0, 0, 0],
    [0, 2, 4, 5, 7, 0, 0, 0],
    [1, 2, 4, 5, 7, 0, 0, 0],
    [0, 1, 2, 4, 5, 7, 0, 0],
    [3, 4, 5, 7, 0, 0, 0, 0],
    [0, 3, 4, 5, 7, 0, 0, 0],
    [1, 3, 4, 5, 7, 0, 0, 0],
    [0, 1, 3, 4, 5, 7, 0, 0],
    [2, 3, 4, 5, 7, 0, 0, 0],
    [0, 2, 3, 4, 5, 7, 0, 0],
    [1, 2, 3, 4, 5, 7, 0, 0],
    [0, 1, 2, 3, 4, 5, 7, 0],
    [6, 7, 0, 0, 0, 0, 0, 0],
    [0, 6, 7, 0, 0, 0, 0, 0],
    [1, 6, 7, 0, 0, 0, 0, 0],
    [0, 1, 6, 7, 0, 0, 0, 0],
    [2, 6, 7, 0, 0, 0, 0, 0],
    [0, 2, 6, 7, 0, 0, 0, 0],
    [1, 2, 6, 7, 0, 0, 0, 0],
    [0, 1, 2, 6, 7, 0, 0, 0],
    [3, 6, 7, 0, 0, 0, 0, 0],
    [0, 3, 6, 7, 0, 0, 0, 0],
    [1, 3, 6, 7, 0, 0, 0, 0],
    [0, 1, 3, 6, 7, 0, 0, 0],
    [2, 3, 6, 7, 0, 0, 0, 0],
    [0, 2, 3, 6, 7, 0, 0, 0],
    [1, 2, 3, 6, 7, 0, 0, 0],
    [0, 1, 2, 3, 6, 7, 0, 0],
    [4, 6, 7, 0, 0, 0, 0, 0],
    [0, 4, 6, 7, 0, 0, 0, 0],
    [1, 4, 6, 7, 0, 0, 0, 0],
    [0, 1, 4, 6, 7, 0, 0, 0],
    [2, 4, 6, 7, 0, 0, 0, 0],
    [0, 2, 4, 6, 7, 0, 0, 0],
    [1, 2, 4, 6, 7, 0, 0, 0],
    [0, 1, 2, 4, 6, 7, 0, 0],
    [3, 4, 6, 7, 0, 0, 0, 0],
    [0, 3, 4, 6, 7, 0, 0, 0],
    [1, 3, 4, 6, 7, 0, 0, 0],
    [0, 1, 3, 4, 6, 7, 0, 0],
    [2, 3, 4, 6, 7, 0, 0, 0],
    [0, 2, 3, 4, 6, 7, 0, 0],
    [1, 2, 3, 4, 6, 7, 0, 0],
    [0, 1, 2, 3, 4, 6, 7, 0],
    [5, 6, 7, 0, 0, 0, 0, 0],
    [0, 5, 6, 7, 0, 0, 0, 0],
    [1, 5, 6, 7, 0, 0, 0, 0],
    [0, 1, 5, 6, 7, 0, 0, 0],
    [2, 5, 6, 7, 0, 0, 0, 0],
    [0, 2, 5, 6, 7, 0, 0, 0],
    [1, 2, 5, 6, 7, 0, 0, 0],
    [0, 1, 2, 5, 6, 7, 0, 0],
    [3, 5, 6, 7, 0, 0, 0, 0],
    [0, 3, 5, 6, 7, 0, 0, 0],
    [1, 3, 5, 6, 7, 0, 0, 0],
    [0, 1, 3, 5, 6, 7, 0, 0],
    [2, 3, 5, 6, 7, 0, 0, 0],
    [0, 2, 3, 5, 6, 7, 0, 0],
    [1, 2, 3, 5, 6, 7, 0, 0],
    [0, 1, 2, 3, 5, 6, 7, 0],
    [4, 5, 6, 7, 0, 0, 0, 0],
    [0, 4, 5, 6, 7, 0, 0, 0],
    [1, 4, 5, 6, 7, 0, 0, 0],
    [0, 1, 4, 5, 6, 7, 0, 0],
    [2, 4, 5, 6, 7, 0, 0, 0],
    [0, 2, 4, 5, 6, 7, 0, 0],
    [1, 2, 4, 5, 6, 7, 0, 0],
    [0, 1, 2, 4, 5, 6, 7, 0],
    [3, 4, 5, 6, 7, 0, 0, 0],
    [0, 3, 4, 5, 6, 7, 0, 0],
    [1, 3, 4, 5, 6, 7, 0, 0],
    [0, 1, 3, 4, 5, 6, 7, 0],
    [2, 3, 4, 5, 6, 7, 0, 0],
    [0, 2, 3, 4, 5, 6, 7, 0],
    [1, 2, 3, 4, 5, 6, 7, 0],
    [0, 1, 2, 3, 4, 5, 6, 7],
];

pub fn gen_input(data_size: usize) -> (Buffer<i32>, Bitmap) {
    let len = data_size; // 4 * 1024
    let mut data = Vec::<i32>::with_capacity(len);
    let mut filter = MutableBitmap::with_capacity(len);
    for i in 0..len {
        data.push(i as _);
        filter.push(i%2 == 0);
    }
    (data.into(), filter.into())
}

// const MASK_ARRAY_1: ;

#[cfg(test)]
mod test {

    /// 
    #[test]
    fn gen_mask_array() {
        for i in 0..256 {
            let a = mask_array(i as u8);
            println!("{:?},", a);
        }
    }

    fn mask_array(mut mask: u8) -> [u32; 8] {
        let mut arr = [0; 8];
        let mut idx = 0;
        for i in 0..8 {
            if mask & 0b0000_0001 == 0b0000_0001 {
                arr[idx] = i;
                idx += 1;
            }
            mask = mask >> 1;
        }
        arr
    }


}